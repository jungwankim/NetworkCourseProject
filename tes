package socs.network.node;
import socs.network.util.Configuration;
import socs.network.message.*;
import java.io.*;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.Vector;


public class Router {

  protected LinkStateDatabase lsd;

  RouterDescription rd = new RouterDescription();

  //assuming that all routers are with 4 ports
  Link[] ports = new Link[4];

  public Router(Configuration config) {
    rd.simulatedIPAddress = config.getString("socs.network.router.ip");
    rd.processPortNumber = config.getShort("socs.network.router.port");
    lsd = new LinkStateDatabase(rd);
  }

  public void printPort() {
	  for (int i = 0; i < this.ports.length; i++) {
		  if (ports[i] != null) {
			  System.out.println(i + "   " + ports[i]); 
		  }
	  }  
  }
  
  public int getFreePort() {
	  for (int i = 0; i < this.ports.length; i++) {
		  if (ports[i] == null) {
			  return i;
		  }
	  }
	  return -1;
  }
  
  
  public int isRouterInPorts(String targetRouterIP) {
	  for (int i = 0; i < ports.length; i++) {
		  if(ports[i] != null) {
			  if (ports[i].router2.simulatedIPAddress.equals(targetRouterIP)) {
				  return i;
			  }
		  }
	  }
	  return -1;
  }
  
  
  private void addLinkedDescription(RouterDescription target, short weight) {
	  boolean isInLSD = false;
	  for (int i = 0; i < this.lsd._store.get(this.rd.simulatedIPAddress).links.size(); i++ ) {
		  //it's in lsd then update weight
		  if (lsd._store.get(rd.simulatedIPAddress).links.get(i).linkID.equals(target.simulatedIPAddress)) {
			  if(lsd._store.get(rd.simulatedIPAddress).links.get(i).tosMetrics != weight) {
				  lsd._store.get(rd.simulatedIPAddress).links.get(i).tosMetrics = weight;
				  this.lsd._store.get(this.rd.simulatedIPAddress).lsaSeqNumber++;
			  }
			  isInLSD = true;
		  }
	  }
	  if (!isInLSD) {
		  LinkDescription ld = new LinkDescription();
		  ld.linkID = target.simulatedIPAddress;
		  ld.portNum = target.processPortNumber;
		  ld.tosMetrics = weight;
		  lsd._store.get(rd.simulatedIPAddress).links.add(ld);
		  this.lsd._store.get(this.rd.simulatedIPAddress).lsaSeqNumber++;
	  }
	  return;
  }
  
  private void removeLinkedDescription (RouterDescription target) {
	  int index = -1;
	  for (int i = 0; i < this.lsd._store.get(this.rd.simulatedIPAddress).links.size(); i++ ) {
		  //it's in lsd then update weight
		  if (this.lsd._store.get(this.rd.simulatedIPAddress).links.get(i).linkID.equals(target.simulatedIPAddress)) {
			  index = i;
		  }
	  }
	  if (index >= 0 ) {
		  this.lsd._store.get(this.rd.simulatedIPAddress).links.remove(index);
	  }
	  this.lsd._store.get(this.rd.simulatedIPAddress).lsaSeqNumber++;
	  return;
  }
//  
//  private void addRequest() {
//	  
//  }
//  
//  public void forwardingDataBaseRequest(SOSPFPacket packet) {
//
//  }
  
 public void synchronizeDB(SOSPFPacket packet) {
	 System.out.println(lsd);
	 for (String key : lsd._store.keySet()) {
		   if (!key.equals(rd.simulatedIPAddress)) {
			   LSA comparingLSA = lsd._store.get(key);
			   boolean deleted = true;
			   int index = isRouterInPorts(key);
			   // it's in port
			   if (index >= 0) {
				   for (int i = 0; i < comparingLSA.links.size(); i++) {
					   if (comparingLSA.links.get(i).linkID.equals(rd.simulatedIPAddress)) {
						   deleted = false;
						   break;
					   }
				   }
				   if (deleted) {
					   System.out.println("why i am here");
					   RouterDescription target = ports[index].router2;
					   removeLinkedDescription(target);
					   ports[index] = null;
					   synchronizeDataBaseRequest();
				   }
			   }
			   else {
				   int freePort = getFreePort();
				   for (int i = 0; i < comparingLSA.links.size(); i++) {
					   if (comparingLSA.links.get(i).linkID.equals(rd.simulatedIPAddress)) {
							RouterDescription target = new RouterDescription(packet.srcProcessIP, packet.srcProcessPort, packet.srcIP);
							Link newLink = new Link(this.rd, target);
							ports[freePort] = newLink;
							addLinkedDescription(target, (short) comparingLSA.links.get(i).tosMetrics);
					   }
				   }
			   }
		   }
	 }
 }


public void synchronizeDataBaseRequest() {
	  for(int i = 0; i < ports.length; i++) {
		  if(ports[i]!= null) {
			  try {
				  RouterDescription target = ports[i].router2;
				  Socket client = new Socket(target.processIPAddress, target.processPortNumber);
				  ObjectOutputStream output = new ObjectOutputStream(client.getOutputStream());
				  ObjectInputStream input = new ObjectInputStream(client.getInputStream());
				  SOSPFPacket packet = new SOSPFPacket();
				  packet.dstIP = target.simulatedIPAddress;
				  packet.sospfType = 1;
				  packet.srcIP = this.rd.simulatedIPAddress;
				  packet.srcProcessIP = this.rd.processIPAddress;
				  packet.srcProcessPort = this.rd.processPortNumber;
				  Vector<LSA> newlsaArray = new Vector<LSA>();
				  for (String key : lsd._store.keySet()) {
					   newlsaArray.add(lsd._store.get(key));
				  }
				  packet.lsaArray = newlsaArray;
				  output.writeObject(packet);
		          output.close();
		          input.close();
		          client.close();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			  
		  }
	  }
	  return;
  }
  /**
   * output the shortest path to the given destination ip
   * <p/>
   * format: source ip address  -> ip address -> ... -> destination ip
   *
   * @param destinationIP the ip adderss of the destination simulated router
   */
  private void processDetect(String destinationIP) {
	  System.out.println(this.lsd.getShortestPath(destinationIP));
	  return;
  }

  /**
   * disconnect with the router identified by the given destination ip address
   * Notice: this command should trigger the synchronization of database
   *
   * @param portNumber the port number which the link attaches at
   */
  private void processDisconnect(short portNumber) {
      //check Basic error
      if (ports[portNumber] == null) {
    	  System.out.println("There is no connection to given port number.");
    	  return;
      }
      else if (portNumber < 0 || portNumber > 3) {
    	  System.out.println("Given port number is invalid.");
    	  return;
      }
      //connect given router to synchronize database
      try {
    	  RouterDescription rdGivenPort = ports[portNumber].router2;
    	  removeLinkedDescription(rdGivenPort);
    	  synchronizeDataBaseRequest();
    	  ports[portNumber] = null;
      } catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
	  }
  }



/**
   * attach the link to the remote router, which is identified by the given simulated ip;
   * to establish the connection via socket, you need to indentify the process IP and process Port;
   * additionally, weight is the cost to transmitting data through the link
   * <p/>
   * NOTE: this command should not trigger link database synchronization
   */
  private void processAttach(String processIP, short processPort,
                             String simulatedIP, short weight) {
	  RouterDescription target = new RouterDescription(processIP, processPort, simulatedIP);
	  Link newLink = new Link(this.rd, target);
	  int protNum = getFreePort();
	  if (protNum >= 0) {
		  try {
			  Socket client = new Socket(processIP, processPort);
			  ObjectOutputStream output = new ObjectOutputStream(client.getOutputStream());
			  ObjectInputStream input = new ObjectInputStream(client.getInputStream());
	          output.writeObject(simulatedIP);
	          String incoming;
	          		try {
	          			incoming = (String) input.readObject();
	          				if (incoming.equals("good")) {
	          					ports[protNum] = newLink;
	          					addLinkedDescription(target, weight);
	          				}
	          				else if (incoming.equals("full")) {
	          					System.out.println("target router's port is full");
	          				}
	          				else {
	          					System.out.println("input wrong ip address.");
	          				}
	          		} catch (ClassNotFoundException e) {
	          			e.printStackTrace();
	          		}
	          output.close();
	          input.close();
	          client.close();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	  }
	  else {
		  System.out.println("all ports are occupied at the momment. Please try it again");
		  return;
	  }  
  }

  /**
   * broadcast Hello to neighbors
   */
  private void processStart() {
	  System.out.println("1");
	  for (int i = 0; i < ports.length; i++) {
		  if (ports[i] != null) {
			  RouterDescription target = ports[i].router2;
			  try {
					Socket client = new Socket(target.processIPAddress, target.processPortNumber);
					ObjectInputStream in = new ObjectInputStream(client.getInputStream());
					ObjectOutputStream out = new ObjectOutputStream(client.getOutputStream());
					  
					SOSPFPacket packet = new SOSPFPacket();
					packet.dstIP = target.simulatedIPAddress;
					packet.sospfType = 0;
					packet.srcIP = this.rd.simulatedIPAddress;
					packet.srcProcessIP = this.rd.processIPAddress;
					packet.srcProcessPort = this.rd.processPortNumber;
					System.out.println("2");
					out.writeObject(packet);
					 System.out.println("3");
					SOSPFPacket received = (SOSPFPacket) in.readObject();
					 System.out.println("4");
					//target port is full remove 
					if (received.sospfType == 2) {
						removeLinkedDescription(target);
						ports[i] = null;
					}
					else {
						System.out.println("received HELLO from " + received.srcIP + ";");
						ports[i].router1.status = RouterStatus.TWO_WAY;
						ports[i].router2.status = RouterStatus.TWO_WAY;
						System.out.println("set " + received.srcIP + " state to TWO_WAY");
						out.writeObject(packet);
					}
					out.close();
					in.close();
					client.close();
			  } catch (UnknownHostException e) {
				  e.printStackTrace();
			  } catch (IOException e) {
				  e.printStackTrace();
			  } catch (ClassNotFoundException e) {
				  e.printStackTrace();
			  }
		  }
	  }
	  synchronizeDataBaseRequest();
  }

  /**
   * attach the link to the remote router, which is identified by the given simulated ip;
   * to establish the connection via socket, you need to indentify the process IP and process Port;
   * additionally, weight is the cost to transmitting data through the link
   * <p/>
   * This command does trigger the link database synchronization
   */
  private void processConnect(String processIP, short processPort, String simulatedIP, short weight) {
	  if(simulatedIP.equals(rd.simulatedIPAddress)) {
		  System.out.println("connecting to self");
		  return;
	  }
	  RouterDescription target = new RouterDescription(processIP, processPort, simulatedIP);
	  Link newLink = new Link(rd, target);
	  int protNum = getFreePort();
	  int isConnected = isRouterInPorts(simulatedIP);
	  System.out.println(isConnected);
	  if (protNum >= 0 && isConnected < 0) {
		  try {
			  Socket client = new Socket(processIP, processPort);
			  ObjectOutputStream output = new ObjectOutputStream(client.getOutputStream());
			  ObjectInputStream input = new ObjectInputStream(client.getInputStream());
	          output.writeObject(simulatedIP);
	          String incoming;
	          try {
	          		incoming = (String) input.readObject();
	          		if (incoming.equals("good")) {
	          			ports[protNum] = newLink;
	          			addLinkedDescription(target, weight);
	          			synchronizeDataBaseRequest();
	          		}
	          		else if (incoming.equals("full")) {
	          			System.out.println("target router's port is full");
	          		}
	          		else {
	          			System.out.println("input wrong ip address.");
	          		}
	          	} catch (ClassNotFoundException e) {
	          		e.printStackTrace();
	          	}
	          output.close();
	          input.close();
	          client.close();
		  } catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		  } catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		  }
	  }
	  else {
		  System.out.println("all ports are occupied at the momment. Please try it again");
		  return;
	  } 
  }



/**
   * output the neighbors of the routers
   */
  private void processNeighbors() {
	  int count = 1;
	  for (int i = 0; i < ports.length; i++) {
		  if(ports[i] != null && ports[i].router2.status == RouterStatus.TWO_WAY) {
			  System.out.println("IP Address of the neighbor" + count + ": " + ports[i].router2.simulatedIPAddress);
			  count++;
		  }
	  }
  }

  /**
   * disconnect with all neighbors and quit the program
   */
  private void processQuit() {
	  for (int i = 0; i < ports.length; i++) {
		  if(ports[i] != null) {
			  RouterDescription target = ports[i].router2;
			  removeLinkedDescription(target);
		  }
	  }
	  synchronizeDataBaseRequest();
	  for (int i = 0; i < ports.length; i++) {
		  ports[i] = null;
	  }
  }

  public void terminal() {
    try {
      System.out.println(this.rd.simulatedIPAddress);
      InputStreamReader isReader = new InputStreamReader(System.in);
      BufferedReader br = new BufferedReader(isReader);
      System.out.print(">> ");
      String command = br.readLine();
      while (true) {
        if (command.startsWith("detect ")) {
          String[] cmdLine = command.split(" ");
          processDetect(cmdLine[1]);
        } else if (command.startsWith("disconnect ")) {
          String[] cmdLine = command.split(" ");
          processDisconnect(Short.parseShort(cmdLine[1]));
        } else if (command.startsWith("quit")) {
          processQuit();
        } else if (command.startsWith("attach ")) {
          String[] cmdLine = command.split(" ");
          processAttach(cmdLine[1], Short.parseShort(cmdLine[2]),
                  cmdLine[3], Short.parseShort(cmdLine[4]));
        } else if (command.equals("start")) {
          processStart();
        } else if (command.startsWith("connect ")) {
          String[] cmdLine = command.split(" ");
          processConnect(cmdLine[1], Short.parseShort(cmdLine[2]),
                  cmdLine[3], Short.parseShort(cmdLine[4]));
        } else if (command.equals("neighbors")) {
          //output neighbors
          processNeighbors();
        } else if (command.equals("debug")) {
        	this.printPort();
        	System.out.println(lsd);
        } else {
          System.out.println("invalid command");
//          break;
        }
        System.out.print(">> ");
        command = br.readLine();
      }
//      isReader.close();
//      br.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

}

/*
attach 192.168.56.1 4001 192.168.1.100 1
connect 192.168.56.1 4001 192.168.1.100 1
*/